// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = "native"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[] @relation("group")

  // approved by admin
  deleted   Boolean   @default(false)
  // if not null - deleted by user(requires an approve by admin)
  deletedAt DateTime?
  deletedBy Int?

  @@unique([name, deleted], name: "existing_group")
  @@map("groups")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  groupId Int
  group   Group  @relation("group", fields: [groupId], references: [id])
  sorts   Sort[] @relation("category")

  // approved by admin
  deleted   Boolean   @default(false)
  // if not null - deleted by user(requires an approve by admin)
  deletedAt DateTime?
  deletedBy Int?

  @@unique([groupId, name, deleted], name: "existing_category")
  @@map("categories")
}

model Sort {
  id   Int    @id @default(autoincrement())
  name String

  categoryId Int
  category   Category @relation("category", fields: [categoryId], references: [id])

  // approved by admin
  deleted   Boolean   @default(false)
  // if not null - deleted by user(requires an approve by admin)
  deletedAt DateTime?
  deletedBy Int?

  @@unique([categoryId, name, deleted], name: "existing_sort")
  @@map("sorts")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String
  password String
  role     String

  @@unique(email)
  @@map("users")
}

enum ChecksDeliveryMethod {
  PERSONALLY
  SERVIENTREGA
}

enum TermsOfPayment {
  PREPAID
  PAIDUPONACTUAL
  POSTPAID
}

model Plantation {
  id             Int                  @id @default(autoincrement())
  name           String
  country        String
  comments       String?
  deliveryMethod ChecksDeliveryMethod @default(PERSONALLY)

  termsOfPayment TermsOfPayment @default(PAIDUPONACTUAL)
  postpaidCredit Float?
  postpaidDays   Int?

  legalEntities PlantationLegalEntity[] @relation("legalEntities")
  contacts      PlantationContacts[]    @relation("contacts")

  transferDetails PlantationTransferDetails[] @relation("plantationTransferDetails")
  checks          PlantationChecks[]          @relation("plantationChecks")

  // approved by admin
  deleted   Boolean   @default(false)
  // if not null - deleted by user(requires an approve by admin)
  deletedAt DateTime?
  deletedBy Int?

  @@unique([name, country, deleted], name: "existing_plantation")
  @@map("plantations")
}

model PlantationLegalEntity {
  id            Int    @id @default(autoincrement())
  name          String
  code          String
  legalAddress  String
  actualAddress String

  transferDetails PlantationTransferDetails[] @relation("plantationLegalEntityTransferDetails")
  checks          PlantationChecks[]          @relation("plantationLegalEntityChecks")

  plantationId Int
  plantation   Plantation @relation("legalEntities", fields: [plantationId], references: [id])

  @@unique([name, plantationId], name: "existing_plantation_legal_entities")
  @@map("plantation_legal_entities")
}

enum PlantationDepartmanet {
  FINANCIAL
  SALES
}

model PlantationContacts {
  id         Int                   @id @default(autoincrement())
  name       String
  email      String
  whatsapp   String
  telegram   String
  skype      String
  position   String
  department PlantationDepartmanet

  plantationId Int
  plantation   Plantation @relation("contacts", fields: [plantationId], references: [id])

  @@unique([plantationId, department, email], name: "plantation_department_contact")
  @@map("plantation_contacts")
}

enum BankAccountType {
  CURRENT
  SAVINGS
}

model PlantationTransferDetails {
  id        Int     @id @default(autoincrement())
  name      String
  favourite Boolean @default(false)

  beneficiary        String
  beneficiaryAddress String?
  documentPath       String?

  bank              String
  bankAddress       String?
  bankAccountNumber String
  bankAccountType   BankAccountType
  bankSwift         String?

  correspondentBank              String?
  correspondentBankAddress       String?
  correspondentBankAccountNumber String?
  correspondentBankSwift         String?

  plantationId Int
  plantation   Plantation @relation("plantationTransferDetails", fields: [plantationId], references: [id])

  plantationLegalEntityId Int
  legalEntity             PlantationLegalEntity @relation("plantationLegalEntityTransferDetails", fields: [plantationLegalEntityId], references: [id], onDelete: Cascade)

  @@map("plantation_transfer_details")
}

model PlantationChecks {
  id           Int     @id @default(autoincrement())
  name         String
  beneficiary  String
  documentPath String?

  favourite Boolean @default(false)

  plantationId Int
  plantation   Plantation @relation("plantationChecks", fields: [plantationId], references: [id])

  plantationLegalEntityId Int
  legalEntity             PlantationLegalEntity @relation("plantationLegalEntityChecks", fields: [plantationLegalEntityId], references: [id], onDelete: Cascade)

  @@map("plantation_checks")
}
